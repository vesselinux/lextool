# 
# Original name: ks-2x2x2x4.sage 
# 

# key schedule equations for one round of lex-2x2x4
#
# these are equations resulting from the relations between two round keys. k2 is calculated from the bits of k1 using the lex/aes key schedule. thus the equations are of the form: k1 + k2 = 0 where k1 is the key for the current round, and k2 is the key for the next round
def keqs(k1,k2):

    # calculate k2 from the bits of k1
    ke = [k1[0] + k1[12]*k1[13]*k1[14] + k1[12]*k1[13]*k1[15] + k1[12]*k1[14]*k1[15] + k1[12]*k1[14] + k1[12]*k1[15] + k1[12] + k1[13]*k1[14]*k1[15] + k1[13]*k1[15] + k1[13] + k1[15], k1[1] + k1[12]*k1[13]*k1[15] + k1[12]*k1[14]*k1[15] + k1[13]*k1[14]*k1[15] + k1[13]*k1[14] + k1[13] + k1[14]*k1[15] + k1[15], k1[2] + k1[12]*k1[13]*k1[14] + k1[12]*k1[13] + k1[12]*k1[14]*k1[15] + k1[12] + k1[13]*k1[14] + k1[13]*k1[15] + k1[14]*k1[15] + k1[14] + k1[15] + 1, k1[3] + k1[12]*k1[13]*k1[14] + k1[12]*k1[13]*k1[15] + k1[12]*k1[13] + k1[12]*k1[15] + k1[12] + k1[14]*k1[15] + k1[15], k1[4] + k1[8]*k1[9]*k1[10] + k1[8]*k1[9]*k1[11] + k1[8]*k1[10]*k1[11] + k1[8]*k1[10] + k1[8]*k1[11] + k1[8] + k1[9]*k1[10]*k1[11] + k1[9]*k1[11] + k1[9] + k1[11], k1[5] + k1[8]*k1[9]*k1[11] + k1[8]*k1[10]*k1[11] + k1[9]*k1[10]*k1[11] + k1[9]*k1[10] + k1[9] + k1[10]*k1[11] + k1[11] + 1, k1[6] + k1[8]*k1[9]*k1[10] + k1[8]*k1[9] + k1[8]*k1[10]*k1[11] + k1[8] + k1[9]*k1[10] + k1[9]*k1[11] + k1[10]*k1[11] + k1[10] + k1[11] + 1, k1[7] + k1[8]*k1[9]*k1[10] + k1[8]*k1[9]*k1[11] + k1[8]*k1[9] + k1[8]*k1[11] + k1[8] + k1[10]*k1[11] + k1[11], k1[0] + k1[8] + k1[12]*k1[13]*k1[14] + k1[12]*k1[13]*k1[15] + k1[12]*k1[14]*k1[15] + k1[12]*k1[14] + k1[12]*k1[15] + k1[12] + k1[13]*k1[14]*k1[15] + k1[13]*k1[15] + k1[13] + k1[15], k1[1] + k1[9] + k1[12]*k1[13]*k1[15] + k1[12]*k1[14]*k1[15] + k1[13]*k1[14]*k1[15] + k1[13]*k1[14] + k1[13] + k1[14]*k1[15] + k1[15], k1[2] + k1[10] + k1[12]*k1[13]*k1[14] + k1[12]*k1[13] + k1[12]*k1[14]*k1[15] + k1[12] + k1[13]*k1[14] + k1[13]*k1[15] + k1[14]*k1[15] + k1[14] + k1[15] + 1, k1[3] + k1[11] + k1[12]*k1[13]*k1[14] + k1[12]*k1[13]*k1[15] + k1[12]*k1[13] + k1[12]*k1[15] + k1[12] + k1[14]*k1[15] + k1[15], k1[4] + k1[8]*k1[9]*k1[10] + k1[8]*k1[9]*k1[11] + k1[8]*k1[10]*k1[11] + k1[8]*k1[10] + k1[8]*k1[11] + k1[8] + k1[9]*k1[10]*k1[11] + k1[9]*k1[11] + k1[9] + k1[11] + k1[12], k1[5] + k1[8]*k1[9]*k1[11] + k1[8]*k1[10]*k1[11] + k1[9]*k1[10]*k1[11] + k1[9]*k1[10] + k1[9] + k1[10]*k1[11] + k1[11] + k1[13] + 1, k1[6] + k1[8]*k1[9]*k1[10] + k1[8]*k1[9] + k1[8]*k1[10]*k1[11] + k1[8] + k1[9]*k1[10] + k1[9]*k1[11] + k1[10]*k1[11] + k1[10] + k1[11] + k1[14] + 1, k1[7] + k1[8]*k1[9]*k1[10] + k1[8]*k1[9]*k1[11] + k1[8]*k1[9] + k1[8]*k1[11] + k1[8] + k1[10]*k1[11] + k1[11] + k1[15]]

    # construct equations of the form: ke(k1) = k2 
    for i in range(0,len(ke)):
        ke[i]=ke[i]+k2[i]

    #vincent transformation, 20090117
    for i in range(len(ke)/2,len(ke)):
        ke[i] = ke[i] + ke[i-len(ke)/2]

    return ke

